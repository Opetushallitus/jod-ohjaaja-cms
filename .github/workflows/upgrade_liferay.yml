name: upgrade_liferay
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment to upgrade'
        required: true
        default: 'dev'
        options:
          - dev
          - test
      tag:
        type: string
        description: 'Image tag to deploy'
        required: true

jobs:
  upgrade:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency:
      group: upgrade-${{ inputs.environment }}

    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.JOD_AWS_DEPLOY_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Take Aurora snapshot
        id: snapshot
        run: |
          TS=$(date +%Y%m%d-%H%M%S)
          SNAPSHOT_ID="${{ secrets.JOD_DB_CLUSTER_IDENTIFIER }}-snapshot-$TS"
          echo "Creating snapshot $SNAPSHOT_ID"
          aws rds create-db-cluster-snapshot \
            --db-cluster-identifier "${{ secrets.JOD_DB_CLUSTER_IDENTIFIER }}" \
            --db-cluster-snapshot-identifier "$SNAPSHOT_ID"
          echo "snapshot_id=$SNAPSHOT_ID" >> $GITHUB_OUTPUT

      - name: Wait for snapshot to be ready
        run: |
          aws rds wait db-cluster-snapshot-available \
            --db-cluster-snapshot-identifier ${{ steps.snapshot.outputs.snapshot_id }}

      - name: Download task definition
        run: >
          aws ecs describe-task-definition
          --task-definition ${{ vars.JOD_ECS_TASKDEF }}
          --query taskDefinition > raw-task-definition.json

      - name: Remove ignored properties from task definition
        run: >
          jq 'del(.compatibilities,
          .taskDefinitionArn,
          .requiresAttributes,
          .revision,
          .status,
          .registeredAt,
          .deregisteredAt,
          .registeredBy)'
          raw-task-definition.json > task-definition.json

      - uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render-task-def
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.JOD_ECS_APP_CONTAINER }}
          image: ${{ secrets.JOD_ECR }}/oph/jod-ohjaaja-cms:${{ inputs.tag }}
          environment-variables: "LIFERAY_UPGRADE_PERIOD_DATABASE_PERIOD_AUTO_PERIOD_RUN=true"

      - name: Scale ECS down
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.JOD_ECS_CLUSTER }} \
            --service ${{ secrets.JOD_ECS_SERVICE }} \
            --desired-count 0

      - name: Wait until tasks are stopped
        timeout-minutes: 10
        run: |
          while true; do
            COUNT=$(aws ecs list-tasks \
              --cluster ${{ secrets.JOD_ECS_CLUSTER }} \
              --service-name ${{ secrets.JOD_ECS_SERVICE }} \
              --desired-status RUNNING \
              --query "taskArns" --output text | wc -w)
            echo "Running tasks: $COUNT"
            [ "$COUNT" -eq 0 ] && break
            sleep 10
          done

      - name: Deploy ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        id: ecs-deploy
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ secrets.JOD_ECS_SERVICE }}
          cluster: ${{ secrets.JOD_ECS_CLUSTER }}
          desired-count: 1
          wait-for-service-stability: true

      - name: Ensure that deploy worked
        run: |
          CURRENT_TASK_DEF_ARN=$(aws ecs describe-services --cluster ${{ secrets.JOD_ECS_CLUSTER }} --services ${{ secrets.JOD_ECS_SERVICE }} --query services[0].deployments[0].taskDefinition --output text)
          NEW_TASK_DEF_ARN=${{ steps.ecs-deploy.outputs.task-definition-arn }}
          if [ "$CURRENT_TASK_DEF_ARN" != "$NEW_TASK_DEF_ARN" ]; then
            echo "Deployment was rolled back"
            exit 1
          fi

      - name: Update image tag parameter
        env:
          TAG: ${{ inputs.tag }}
        run: >
          aws ssm put-parameter --overwrite --type String
          --name ${{ vars.JOD_IMAGE_TAG_PARAM }} --value "${TAG##*:}"

